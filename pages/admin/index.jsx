import Head from 'next/head'
import { useRouter } from 'next/router'
import styled from 'styled-components'
import Tabs from '../../components/tabs'
import { DataGrid } from '@mui/x-data-grid'
import {
	Chart as ChartJS,
	CategoryScale,
	LinearScale,
	PointElement,
	LineElement,
	Title,
	Tooltip,
	Legend,
} from 'chart.js'
import { Line } from 'react-chartjs-2'
import db from '../../services/db'

const Page = styled.div`
	margin-bottom: 40px;
	height: 100%;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
`

const AdminHeader = styled.section`
  width: 100%;
  height: 400px;
  background-color: blue;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
`
const TabContainer = styled.div`
  transform: translateY(-5%);
`

const ManageTeam = styled.div`
  height: 100%;
`

const CustomerOutreach = styled.div`
  background-color: orange;
  height: 100%;
`

const ContentManagement = styled.div`
  background-color: magenta;
  height: 100%;
`

const Statistics = styled.div`
	height: 100%;
`

const AdminPage = (props) => {

	const router = useRouter()
	const { data } = props
	const columns = [
		{ field: 'uid', headerName: 'UID', width: 100},
		{ field: 'email', headerName: 'Email', width: 200 },
		{ field: 'name', headerName: 'Name', width: 100},
	]

	ChartJS.register(
		CategoryScale,
		LinearScale,
		PointElement,
		LineElement,
		Title,
		Tooltip,
		Legend
	)
	
	const options = {
		responsive: true,
		plugins: {
			legend: {
				position: 'top',
			},
			title: {
				display: true,
				text: 'Chart.js Line Chart',
			},
		},
	}
	
	const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July']
	
	const data1 = {
		labels,
		datasets: [
			{
				label: 'Monthly Registered Users',
				data: labels.map(() => 50),
				borderColor: 'rgb(255, 99, 132)',
				backgroundColor: 'rgba(255, 99, 132, 0.5)',
			}
		],
	}
  
	const tabs = [
		{
			name: 'Manage Team',
			content: <ManageTeam >
				<DataGrid 
					rows={data}
					columns={columns}
					pageSize={10}
					rowsPerPageOptions={[5]}
        			checkboxSelection
				/>
			</ManageTeam>
		},
		{
			name: 'Statistics',
			content: <Statistics>
				<table className='charts-css line'>
					<caption>Total Users</caption>
					<thead>
						<tr>
							<th scope='col'>Count</th>
							<th scope='col'>Day</th>
						</tr>
					</thead>
					<tbody>
						{data.map(
							(entry, index) => {
								return <tr key={entry.id}>
									<th>{index}</th>
									<th>{entry.email}</th>
								</tr>
							}
						)}
					</tbody>
				</table>
				<Line data={data1} options={options} />
			</Statistics>
		},
		{
			name: 'Customer Outreach',
			content: <CustomerOutreach />
		},
		{
			name: 'Content Management',
			content: <ContentManagement />
		}
	]

	if (router.isFallback) {
		return (
		  <div>loading</div>
		)
	} else {
		return (
			<Page>
				<Head>
					<title>Admin </title>
					<meta name="description" content="Generated by create next app" />
					<meta name="viewport" content="width=device-width, initial-scale=1" />
					<link rel="icon" href="/favicon.ico" />
				</Head>

				<AdminHeader>
					<h1>Admin Dashboard</h1>
				</AdminHeader>

				<TabContainer>
					<Tabs tabs={tabs} path={router.pathname} router={router} />
				</TabContainer>
      
			</Page>
		)
	}
}
  
export const getStaticProps = async () => {
	const res = await db.collection('users').orderBy('created', 'desc').get()
	const entriesData = res.docs.map(entry => ({
		id: entry.id,
		...entry.data()
	}))

	return {
		props: { data: entriesData },
		revalidate: 10
	}
}

export default AdminPage