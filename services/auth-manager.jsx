import { getAuth, createUserWithEmailAndPassword, onAuthStateChanged, signOut, signInWithEmailAndPassword } from "firebase/auth";
import { Fragment } from "react";
import auth from '../config/firebase';

const [showLoginModal, setShowLoginModal] = useState(false);
const [showRegisterModal, setShowRegisterModal] = useState(false);

const [registerEmail, setRegisterEmail] = useState("");
const [registerPassword, setRegisterPassword] = useState("");

const [loginEmail, setLoginEmail] = useState("");
const [loginPassword, setLoginPassword] = useState("");

// function for handling register
const handleRegister = async () => {
  try{
    const user = await createUserWithEmailAndPassword(auth, registerEmail, registerPassword);
    console.log(user);
  }
  catch(err){
    console.log(err.message);
  }
}

// firebase sign up func
createUserWithEmailAndPassword(auth, registerEmail, registerPassword)
.then((userCredential) => {
  // Signed in 
  const user = userCredential.user;
  console.log(user)
  // ...
})
.catch((error) => {
  const errorCode = error.code;
  const errorMessage = error.message;
  console.log(`${errorMessage}`);
  // ..
});


// firebase login func
signInWithEmailAndPassword(auth, email, password)
.then((userCredential) => {
  // Signed in 
  const user = userCredential.user;
  // ...
})
.catch((error) => {
  const errorCode = error.code;
  const errorMessage = error.message;
});


  // function for handling login
const handleLogin = async (email, password) => {

  try{
    const user = await signInWithEmailAndPassword(auth, loginEmail, loginPassword);
    console.log(user);
    
  }
  catch(err){
    console.log(err.message);
  }
}

// function for handling log out
const handleLogout = async () => {
  await signOut(auth);
}

export default function AuthManager(){

    return(
        <Fragment>
            <Head>
                <title>Lucky Bet</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <button onClick={() => {setShowRegisterModal(true)}}>Register</button>

            {showRegisterModal ? <RegisterModal>
            <h3>Register User</h3>

            <RegisterForm>
                <label for='email'>Email</label>
                <input type='text'  name='email' onChange={(e) => {setRegisterEmail(e.target.value)}} />
                <label for='password'>Password</label>
                <input type='password'  name='password' onChange={(e) => {setRegisterPassword(e.target.value)}}/>
                <button onClick={handleRegister}>Register</button>
            </RegisterForm>
            <button onClick={() => {setShowRegisterModal(false)}}>Close</button>

            </RegisterModal> : null}



            <button onClick={() => {setShowLoginModal(true)}}>Log In</button>

            {showLoginModal ? <LoginModal>
            <h3>Login</h3>
            <LoginForm>
                <label for='email'>Email</label>
                <input type='text' placeholder='email' name='email' onChange={(e) => {setLoginEmail(e.target.value)}} />
                <label for='password'>Password</label>
                <input type='password' placeholder='password' name='password' onChange={(e) => {setLoginPassword(e.target.value)}} />
                <button type='submit' onClick={() => {handleLogin(loginEmail, loginPassword)}}>Log In</button>
            </LoginForm>
            <button onClick={() => {setShowLoginModal(false)}}>Close</button>
            </LoginModal> : null} 

            <button onClick={handleLogout}>Sign out</button>

        </Fragment>
    )
}

